;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 21/05/2020
;Author  : SangengoN
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
; 0000 0027 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0028 // Start the AD conversion
; 0000 0029 ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A // Wait for the AD conversion to complete
; 0000 002B while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002C ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002D return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E }
;PCODE: $00000021 VOL: 0
;
;// Declare your global variables here
;float voltage = 5.0;

	.DSEG
;float current = 4.0;
;
;char lcd_buffer[33];
;char lcd_buffer2[33];
;float vinput;
;int dataadc;
;
;float arus1, vout1, daya,sinyal;
;int adc1, count, dataMin, dataMax;
;unsigned char buf_min[10];
;unsigned char buf_max[10];
;unsigned char buf_arus1[10];
;unsigned char buf_daya[10];
;
; #define password 'jombloelit';
; #define auth 'jr4JZbDvkPOI-6C7Ra15UTvZsYsIxkYC';
; #define ssid 'WAKANDA';
;
;void main(void)
; 0000 0045 {

	.CSEG
;PCODE: $00000022 VOL: 0
; 0000 0046 // Declare your local variables here
; 0000 0047 
; 0000 0048 // Input/Output Ports initialization
; 0000 0049 // Port A initialization
; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004C PORTA=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004D DDRA=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004E 
; 0000 004F // Port B initialization
; 0000 0050 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0052 PORTB=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0053 DDRB=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0054 
; 0000 0055 // Port C initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=1
; 0000 0058 PORTC=0x01;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0059 DDRC=0x01;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 005A 
; 0000 005B // Port D initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTD=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005F DDRD=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 0 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: Timer 0 Stopped
; 0000 0064 // Mode: Normal top=0xFF
; 0000 0065 // OC0 output: Disconnected
; 0000 0066 TCCR0=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0067 TCNT0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0068 OCR0=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0069 
; 0000 006A // Timer/Counter 1 initialization
; 0000 006B // Clock source: System Clock
; 0000 006C // Clock value: Timer1 Stopped
; 0000 006D // Mode: Normal top=0xFFFF
; 0000 006E // OC1A output: Discon.
; 0000 006F // OC1B output: Discon.
; 0000 0070 // Noise Canceler: Off
; 0000 0071 // Input Capture on Falling Edge
; 0000 0072 // Timer1 Overflow Interrupt: Off
; 0000 0073 // Input Capture Interrupt: Off
; 0000 0074 // Compare A Match Interrupt: Off
; 0000 0075 // Compare B Match Interrupt: Off
; 0000 0076 TCCR1A=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0077 TCCR1B=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0078 TCNT1H=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0079 TCNT1L=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007A ICR1H=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 007B ICR1L=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007C OCR1AH=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 007D OCR1AL=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 007E OCR1BH=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 007F OCR1BL=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0080 
; 0000 0081 // Timer/Counter 2 initialization
; 0000 0082 // Clock source: System Clock
; 0000 0083 // Clock value: Timer2 Stopped
; 0000 0084 // Mode: Normal top=0xFF
; 0000 0085 // OC2 output: Disconnected
; 0000 0086 ASSR=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0087 TCCR2=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0088 TCNT2=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0089 OCR2=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 008A 
; 0000 008B // External Interrupt(s) initialization
; 0000 008C // INT0: Off
; 0000 008D // INT1: Off
; 0000 008E // INT2: Off
; 0000 008F MCUCR=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0090 MCUCSR=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0091 
; 0000 0092 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0093 TIMSK=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0094 
; 0000 0095 // USART initialization
; 0000 0096 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0097 // USART Receiver: Off
; 0000 0098 // USART Transmitter: On
; 0000 0099 // USART Mode: Asynchronous
; 0000 009A // USART Baud Rate: 9600
; 0000 009B UCSRA=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 009C UCSRB=0x08;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009D UCSRC=0x86;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009E UBRRH=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 009F UBRRL=0x33;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00A0 
; 0000 00A1 // Analog Comparator initialization
; 0000 00A2 // Analog Comparator: Off
; 0000 00A3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A4 ACSR=0x80;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A5 SFIOR=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A6 
; 0000 00A7 // ADC initialization
; 0000 00A8 // ADC Clock frequency: 125.000 kHz
; 0000 00A9 // ADC Voltage Reference: AREF pin
; 0000 00AA // ADC Auto Trigger Source: ADC Stopped
; 0000 00AB ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00AC ADCSRA=0x86;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00AD 
; 0000 00AE // SPI initialization
; 0000 00AF // SPI disabled
; 0000 00B0 SPCR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00B1 
; 0000 00B2 // TWI initialization
; 0000 00B3 // TWI disabled
; 0000 00B4 TWCR=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B5 
; 0000 00B6 // Alphanumeric LCD initialization
; 0000 00B7 // Connections are specified in the
; 0000 00B8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B9 // RS - PORTC Bit 7
; 0000 00BA // RD - PORTC Bit 6
; 0000 00BB // EN - PORTC Bit 5
; 0000 00BC // D4 - PORTC Bit 4
; 0000 00BD // D5 - PORTC Bit 3
; 0000 00BE // D6 - PORTC Bit 2
; 0000 00BF // D7 - PORTC Bit 1
; 0000 00C0 // Characters/line: 16
; 0000 00C1 lcd_init(16);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C2 
; 0000 00C3 
; 0000 00C4 /*
; 0000 00C5 
; 0000 00C6  char password[10];
; 0000 00C7  char auth[50];
; 0000 00C8  char ssid[10];
; 0000 00C9 
; 0000 00CA */
; 0000 00CB 
; 0000 00CC  // printf("{\"voltage\":%0.1f, \"current\":%0.1f, \"sinyal\":%0.1f}\r\n",vinput,current,sinyal);
; 0000 00CD 
; 0000 00CE  //sprintf("{\"auth\":%s, \"ssid\":%s, \"pass\":%s}\r\n",auth,ssid,password);
; 0000 00CF    delay_ms(5000);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00D0   printf("{\"auth\":\"jr4JZbDvkPOI-6C7Ra15UTvZsYsIxkYC\",\"ssid\":\"WAKANDA\",\"pass\":\"jombloelit\"}");
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00D1   delay_ms(1000);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00D2    printf("{\"auth\":\"jr4JZbDvkPOI-6C7Ra15UTvZsYsIxkYC\",\"ssid\":\"WAKANDA\",\"pass\":\"jombloelit\"}");
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00D3    delay_ms(1000);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00D4 
; 0000 00D5 
; 0000 00D6 while(1){
;PCODE: $00000087 VOL: 0
; 0000 00D7 
; 0000 00D8  float a = 90.0,b=10.0;
; 0000 00D9       current = 1.2;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;	a -> Y+4
;	b -> Y+0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00DA 
; 0000 00DB 
; 0000 00DC  // vcc = 5v ; adc 10 bit = 1024 desimal
; 0000 00DD  //sprintf(lcd_buffer,"Volt :%0.0001f V",vinput);
; 0000 00DE 
; 0000 00DF 
; 0000 00E0 //sprintf(lcd_buffer,"Current :%0.0001f A",current);
; 0000 00E1 
; 0000 00E2 
; 0000 00E3 // printf("%0.1f %0.1f %0.1f %0.1f\r\n", vinput,current,a,b);
; 0000 00E4 //printf("%0.0002f",dataadc);
; 0000 00E5  dataadc=read_adc(0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E6 //if(dataadc<600)dataadc = 0;
; 0000 00E7 
; 0000 00E8 vinput=((float)(dataadc*17)/700);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00E9 sinyal = vinput/19.3*100;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00EA if(sinyal>100){
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00EB sinyal =100;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00EC }
; 0000 00ED     vout1 = dataMax*(5.0/1023);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00EE       arus1 = fabs(vout1-2.50)/0.066;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EF       current = arus1;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F0       if(current>10){
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F1       current = 0;}
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F2 printf("{\"voltage\":%0.1f, \"current\":%0.1f, \"sinyal\":%0.1f}\r\n",vinput,current,sinyal);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00F3 sprintf(lcd_buffer,"%0.1f %0.1f %0.1f\n", vinput,current,sinyal);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F4 sprintf(lcd_buffer2," V    Ir     S");
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00F5 lcd_gotoxy(0,0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00F6 lcd_puts(lcd_buffer2);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00F7 lcd_gotoxy(0,1);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00F8 lcd_puts(lcd_buffer);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00F9 delay_ms(5000);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00FA 
; 0000 00FB 
; 0000 00FC 
; 0000 00FD 
; 0000 00FE 
; 0000 00FF };           }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;
;
;//while (1)
;//      {
;//
;//      char buff[33];
;//
;//      float a = 90.0,b=90.0;
;//      current = 1.0;
;//    //  voltage = 9.8;current = 1.2;
;//     dataadc=read_adc(0);
;//    // if(dataadc<600)dataadc = 0;
;//    vinput=((float)(dataadc*17)/700);
;//    sprintf(lcd_buffer,"Volt :%i V",dataadc);
;//      lcd_gotoxy(0,1);
;//        lcd_puts(lcd_buffer);
;//      lcd_gotoxy(0,0);
;//      printf("%0.1f %0.1f %0.1f %0.1f\r\n", voltage,current,a,b);
;//      lcd_puts("a");
;//      DDRC=0x00;
;//      delay_ms(500);
;//      DDRC=0x01;
;//      delay_ms(500);
;//      //voltage +=0.1;
;//     // current +=0.2;
;//
;//     //  if(voltage>300){voltage = 0;}
;//     //  if(current>300){current = 0;}
;//      // Place your code here
;//      //lcd_clear();
;//
;//      };
;//}
